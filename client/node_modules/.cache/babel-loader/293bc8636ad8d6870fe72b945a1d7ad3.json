{"ast":null,"code":"var _jsxFileName = \"/home/carina/priv/trot-race-simulator/client/src/App.jsx\";\nimport React, { Component } from \"react\";\nimport socketIOClient from \"socket.io-client\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      response: false,\n      endpoint: \"http://127.0.0.1:4001\",\n      horses: null\n    };\n    const horseList = {};\n  }\n\n  componentDidMount() {\n    const {\n      endpoint\n    } = this.state;\n    const socket = socketIOClient(endpoint);\n    socket.on(\"FromAPI\", data => this.setState({\n      response: data\n    }));\n    console.log('mounted!');\n    console.log('state', this.state.response);\n  }\n\n  componentDidUpdate(prevState) {\n    const resp = this.state.response;\n\n    if (localStorage.getItem('horses') === null) {\n      localStorage.setItem('horses', [resp]);\n    } else {\n      let savedHorses = localStorage.getItem('horses');\n      console.log('saved Horses:', savedHorses);\n    } // let selectedImages = localStorage.getItem('selectedImages');\n    //     // Create instance of ids array and push key\n    //     let selectedImagesArray = selectedImages.ids.push(key);\n    //     // set .ids as selectedImagesArray\n    //     selectedImages.ids = selectedImagesArray;\n    //     // Set new local storage\n    //     localStorage.setItem('selectedImages', selectedImages);\n    // let savedHorses = localStorage.getItem('horses');\n    // let savedHorsesArray = savedHorses.keys.push(resp.horse.id);\n    // savedHorsesArray.keys = savedHorsesArray;\n    // localStorage.setItem('horses', resp);\n    // localStorage.getItem('horses')\n\n\n    if (resp.event === 'start') {\n      // this.state.horses += resp.horses;\n      console.log('horseList', this.state.horses);\n    }\n\n    console.log('updating...');\n    console.log('prevState', prevState);\n    console.log('state', this.state.response); // If we have a new update\n    // if (!this.featuresEqual(prevState.response, this.state.response)) {\n    // }\n  }\n\n  featuresEqual(a, b) {\n    const comparable = features => features.slice().sort().join(',');\n\n    return comparable(a) === comparable(b);\n  }\n\n  renderTableData() {\n    const {\n      response\n    } = this.state; // {Object.keys(response.horse).map(function(key) {\n    //   // TODO:\n    //    if (typeof key === 'object') {}\n    //   return <div key={key}> Key value is {key}, and Value is {response[key]} </div>\n    // })}\n\n    {\n      /* The temperature in Florence is: {response} Â°F */\n    }\n\n    if (response) {\n      return Object.keys(response['horse']).map(function (key) {\n        // const { id, name} = horse //destructuring\n        return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"tr\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(\"th\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 13\n          }\n        }, \"No\"), /*#__PURE__*/React.createElement(\"th\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 13\n          }\n        }, \"Horse\"), /*#__PURE__*/React.createElement(\"th\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 13\n          }\n        }, \"Time\")), /*#__PURE__*/React.createElement(\"tr\", {\n          key: key,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(\"td\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 15\n          }\n        }, response['horse'].id), /*#__PURE__*/React.createElement(\"td\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 15\n          }\n        }, response['horse'].name), /*#__PURE__*/React.createElement(\"td\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 15\n          }\n        }, \"-\")));\n      });\n    } else {\n      return;\n    }\n  }\n\n  render() {\n    const {\n      response\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        textAlign: \"center\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }\n    }, response ? /*#__PURE__*/React.createElement(\"table\", {\n      id: \"results\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"tbody\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 17\n      }\n    }, this.renderTableData())) : /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 17\n      }\n    }, \"Loading...\"));\n  }\n\n}\n\nexport default App; // const tifOptions = Object.keys(tifs).map(key =>\n//   <option value={key}>{tifs[key]}</option>\n// )\n// {Object.keys(yourObject).map(function(key) {\n//   return <div>Key: {key}, Value: {yourObject[key]}</div>;\n// })}","map":{"version":3,"sources":["/home/carina/priv/trot-race-simulator/client/src/App.jsx"],"names":["React","Component","socketIOClient","App","constructor","state","response","endpoint","horses","horseList","componentDidMount","socket","on","data","setState","console","log","componentDidUpdate","prevState","resp","localStorage","getItem","setItem","savedHorses","event","featuresEqual","a","b","comparable","features","slice","sort","join","renderTableData","Object","keys","map","key","id","name","render","textAlign"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport socketIOClient from \"socket.io-client\";\n\n\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      response: false,\n      endpoint: \"http://127.0.0.1:4001\",\n      horses: null,\n    };\n    const horseList = {};\n  }\n\n  componentDidMount() {\n    const { endpoint } = this.state;\n    const socket = socketIOClient(endpoint);\n    socket.on(\"FromAPI\", data => this.setState({ response: data }));\n    console.log('mounted!')\n    console.log('state', this.state.response);\n  }\n\n  componentDidUpdate(prevState) {\n    const resp = this.state.response;\n    if (localStorage.getItem('horses') === null) {\n      localStorage.setItem('horses', [resp]);\n    }\n    else {\n      let savedHorses = localStorage.getItem('horses');\n      console.log('saved Horses:', savedHorses);\n    }\n\n\n\n    // let selectedImages = localStorage.getItem('selectedImages');\n\n    //     // Create instance of ids array and push key\n    //     let selectedImagesArray = selectedImages.ids.push(key);\n    //     // set .ids as selectedImagesArray\n    //     selectedImages.ids = selectedImagesArray;\n\n    //     // Set new local storage\n    //     localStorage.setItem('selectedImages', selectedImages);\n\n\n\n    // let savedHorses = localStorage.getItem('horses');\n    // let savedHorsesArray = savedHorses.keys.push(resp.horse.id);\n    // savedHorsesArray.keys = savedHorsesArray;\n\n    // localStorage.setItem('horses', resp);\n    // localStorage.getItem('horses')\n\n\n    if (resp.event === 'start') {\n\n\n\n      // this.state.horses += resp.horses;\n      console.log('horseList', this.state.horses);\n\n    }\n\n    console.log('updating...');\n    console.log('prevState', prevState);\n    console.log('state', this.state.response);\n    // If we have a new update\n    // if (!this.featuresEqual(prevState.response, this.state.response)) {\n\n    // }\n\n  }\n\n  featuresEqual(a, b) {\n    const comparable = (features) => features\n        .slice()\n        .sort()\n        .join(',');\n\n    return comparable(a) === comparable(b);\n  }\n\n  renderTableData() {\n    const { response } = this.state;\n\n    // {Object.keys(response.horse).map(function(key) {\n    //   // TODO:\n    //    if (typeof key === 'object') {}\n\n    //   return <div key={key}> Key value is {key}, and Value is {response[key]} </div>\n    // })}\n    {/* The temperature in Florence is: {response} Â°F */}\n\n\n    if (response) {\n      return Object.keys(response['horse']).map(function(key) {\n        // const { id, name} = horse //destructuring\n        return (\n          <>\n          <tr>\n            <th>No</th>\n            <th>Horse</th>\n            <th>Time</th>\n          </tr>\n          <tr key={key}>\n              <td>{response['horse'].id}</td>\n              <td>{response['horse'].name}</td>\n              <td>-</td>\n              {/* <td>{time}</td> */}\n          </tr>\n          </>\n        )\n    })\n    } else {\n      return;\n    }\n\n  }\n  render() {\n    const { response } = this.state;\n    return (\n        <div style={{ textAlign: \"center\" }}>\n          {response\n              ? <table id='results'>\n                <tbody>\n                  {this.renderTableData()}\n               </tbody>\n\n\n              </table>\n              : <p>Loading...</p>}\n        </div>\n    );\n  }\n}\nexport default App;\n\n\n// const tifOptions = Object.keys(tifs).map(key =>\n//   <option value={key}>{tifs[key]}</option>\n// )\n\n// {Object.keys(yourObject).map(function(key) {\n//   return <div>Key: {key}, Value: {yourObject[key]}</div>;\n// })}\n"]},"metadata":{},"sourceType":"module"}