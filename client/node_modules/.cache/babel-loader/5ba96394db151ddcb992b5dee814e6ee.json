{"ast":null,"code":"var _jsxFileName = \"/home/carina/priv/trot-race-simulator/client/src/App.jsx\";\nimport React, { Component } from \"react\";\nimport socketIOClient from \"socket.io-client\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      response: null,\n      endpoint: \"http://127.0.0.1:4001\",\n      horses: []\n    };\n    var horseList = [];\n  }\n\n  componentDidMount() {\n    const {\n      endpoint\n    } = this.state;\n    const socket = socketIOClient(endpoint);\n    socket.on(\"FromAPI\", data => this.setState({\n      response: data\n    }));\n    console.log('mounted!');\n    console.log('state', this.state.response);\n  }\n\n  componentDidUpdate(prevState) {\n    const resp = this.state.response;\n    const newList = this.horseList;\n\n    if (resp.event === 'start') {\n      newList = this.horseList.push({\n        name: resp.name,\n        time: resp.time\n      });\n      this.horseList = newList; // this.state.horses += resp.horses;\n\n      console.log('horseList', this.horseList);\n    }\n\n    console.log('updating...');\n    console.log('prevState', prevState);\n    console.log('state', this.state.response); // If we have a new update\n    // if (!this.featuresEqual(prevState.response, this.state.response)) {\n    // }\n  }\n\n  featuresEqual(a, b) {\n    const comparable = features => features.slice().sort().join(',');\n\n    return comparable(a) === comparable(b);\n  }\n\n  renderTableData() {\n    const {\n      response\n    } = this.state; // {Object.keys(response).map(function(key) {\n    //   // TODO:\n    //    if (typeof key === 'object') {}\n    //   return <div key={key}> Key value is {key}, and Value is {response[key]} </div>\n    // })}\n    // {/* The temperature in Florence is: {response} °F */}\n\n    if (this.horseList) {\n      return this.horseList.map((horse, index) => {\n        const {\n          id,\n          name,\n          time\n        } = horse; //destructuring\n\n        return /*#__PURE__*/React.createElement(\"tr\", {\n          key: id,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(\"td\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 15\n          }\n        }, id), /*#__PURE__*/React.createElement(\"td\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 15\n          }\n        }, name));\n      });\n    } else {\n      return;\n    }\n  }\n\n  render() {\n    const {\n      response\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        textAlign: \"center\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }\n    }, response ? /*#__PURE__*/React.createElement(\"table\", {\n      id: \"results\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"tbody\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }\n    }, this.renderTableData())) : /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }\n    }, \"Loading...\"));\n  }\n\n}\n\nexport default App; // const tifOptions = Object.keys(tifs).map(key =>\n//   <option value={key}>{tifs[key]}</option>\n// )\n// {Object.keys(yourObject).map(function(key) {\n//   return <div>Key: {key}, Value: {yourObject[key]}</div>;\n// })}","map":{"version":3,"sources":["/home/carina/priv/trot-race-simulator/client/src/App.jsx"],"names":["React","Component","socketIOClient","App","constructor","state","response","endpoint","horses","horseList","componentDidMount","socket","on","data","setState","console","log","componentDidUpdate","prevState","resp","newList","event","push","name","time","featuresEqual","a","b","comparable","features","slice","sort","join","renderTableData","map","horse","index","id","render","textAlign"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,cAAP,MAA2B,kBAA3B;;AAIA,MAAMC,GAAN,SAAkBH,KAAK,CAACC,SAAxB,CAAkC;AAChCG,EAAAA,WAAW,GAAG;AACZ;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,QAAQ,EAAE,IADC;AAEXC,MAAAA,QAAQ,EAAE,uBAFC;AAGXC,MAAAA,MAAM,EAAE;AAHG,KAAb;AAKA,QAAIC,SAAS,GAAG,EAAhB;AACD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClB,UAAM;AAAEH,MAAAA;AAAF,QAAe,KAAKF,KAA1B;AACA,UAAMM,MAAM,GAAGT,cAAc,CAACK,QAAD,CAA7B;AACAI,IAAAA,MAAM,CAACC,EAAP,CAAU,SAAV,EAAqBC,IAAI,IAAI,KAAKC,QAAL,CAAc;AAAER,MAAAA,QAAQ,EAAEO;AAAZ,KAAd,CAA7B;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqB,KAAKX,KAAL,CAAWC,QAAhC;AACD;;AAEDW,EAAAA,kBAAkB,CAACC,SAAD,EAAY;AAC5B,UAAMC,IAAI,GAAG,KAAKd,KAAL,CAAWC,QAAxB;AACA,UAAMc,OAAO,GAAG,KAAKX,SAArB;;AAEA,QAAIU,IAAI,CAACE,KAAL,KAAe,OAAnB,EAA4B;AAE1BD,MAAAA,OAAO,GAAG,KAAKX,SAAL,CAAea,IAAf,CAAoB;AAC1BC,QAAAA,IAAI,EAAEJ,IAAI,CAACI,IADe;AAE1BC,QAAAA,IAAI,EAAEL,IAAI,CAACK;AAFe,OAApB,CAAV;AAIA,WAAKf,SAAL,GAAiBW,OAAjB,CAN0B,CAQ1B;;AACAL,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyB,KAAKP,SAA9B;AAED;;AAEDM,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBE,SAAzB;AACAH,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqB,KAAKX,KAAL,CAAWC,QAAhC,EAnB4B,CAoB5B;AACA;AAEA;AAED;;AAEDmB,EAAAA,aAAa,CAACC,CAAD,EAAIC,CAAJ,EAAO;AAClB,UAAMC,UAAU,GAAIC,QAAD,IAAcA,QAAQ,CACpCC,KAD4B,GAE5BC,IAF4B,GAG5BC,IAH4B,CAGvB,GAHuB,CAAjC;;AAKA,WAAOJ,UAAU,CAACF,CAAD,CAAV,KAAkBE,UAAU,CAACD,CAAD,CAAnC;AACD;;AAEDM,EAAAA,eAAe,GAAG;AAChB,UAAM;AAAE3B,MAAAA;AAAF,QAAe,KAAKD,KAA1B,CADgB,CAGhB;AACA;AACA;AAEA;AACA;AACA;;AAGA,QAAI,KAAKI,SAAT,EAAoB;AAClB,aAAO,KAAKA,SAAL,CAAeyB,GAAf,CAAmB,CAACC,KAAD,EAAQC,KAAR,KAAkB;AAC1C,cAAM;AAAEC,UAAAA,EAAF;AAAMd,UAAAA,IAAN;AAAYC,UAAAA;AAAZ,YAAoBW,KAA1B,CAD0C,CACV;;AAChC,4BACE;AAAI,UAAA,GAAG,EAAEE,EAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAKA,EAAL,CADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAKd,IAAL,CAFJ,CADF;AAOH,OATQ,CAAP;AAUD,KAXD,MAWO;AACL;AACD;AAEF;;AACDe,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEhC,MAAAA;AAAF,QAAe,KAAKD,KAA1B;AACA,wBACI;AAAK,MAAA,KAAK,EAAE;AAAEkC,QAAAA,SAAS,EAAE;AAAb,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGjC,QAAQ,gBACH;AAAO,MAAA,EAAE,EAAC,SAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAK2B,eAAL,EADH,CADA,CADG,gBAQH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBATR,CADJ;AAaD;;AAlG+B;;AAoGlC,eAAe9B,GAAf,C,CAGA;AACA;AACA;AAEA;AACA;AACA","sourcesContent":["import React, { Component } from \"react\";\nimport socketIOClient from \"socket.io-client\";\n\n\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      response: null,\n      endpoint: \"http://127.0.0.1:4001\",\n      horses: [],\n    };\n    var horseList = [];\n  }\n\n  componentDidMount() {\n    const { endpoint } = this.state;\n    const socket = socketIOClient(endpoint);\n    socket.on(\"FromAPI\", data => this.setState({ response: data }));\n    console.log('mounted!')\n    console.log('state', this.state.response);\n  }\n\n  componentDidUpdate(prevState) {\n    const resp = this.state.response;\n    const newList = this.horseList;\n\n    if (resp.event === 'start') {\n\n      newList = this.horseList.push({\n          name: resp.name,\n          time: resp.time\n      });\n      this.horseList = newList;\n\n      // this.state.horses += resp.horses;\n      console.log('horseList', this.horseList);\n\n    }\n\n    console.log('updating...');\n    console.log('prevState', prevState);\n    console.log('state', this.state.response);\n    // If we have a new update\n    // if (!this.featuresEqual(prevState.response, this.state.response)) {\n\n    // }\n\n  }\n\n  featuresEqual(a, b) {\n    const comparable = (features) => features\n        .slice()\n        .sort()\n        .join(',');\n\n    return comparable(a) === comparable(b);\n  }\n\n  renderTableData() {\n    const { response } = this.state;\n\n    // {Object.keys(response).map(function(key) {\n    //   // TODO:\n    //    if (typeof key === 'object') {}\n\n    //   return <div key={key}> Key value is {key}, and Value is {response[key]} </div>\n    // })}\n    // {/* The temperature in Florence is: {response} °F */}\n\n\n    if (this.horseList) {\n      return this.horseList.map((horse, index) => {\n        const { id, name, time} = horse //destructuring\n        return (\n          <tr key={id}>\n              <td>{id}</td>\n              <td>{name}</td>\n              {/* <td>{time}</td> */}\n          </tr>\n        )\n    })\n    } else {\n      return;\n    }\n\n  }\n  render() {\n    const { response } = this.state;\n    return (\n        <div style={{ textAlign: \"center\" }}>\n          {response\n              ? <table id='results'>\n                <tbody>\n                  {this.renderTableData()}\n               </tbody>\n\n\n              </table>\n              : <p>Loading...</p>}\n        </div>\n    );\n  }\n}\nexport default App;\n\n\n// const tifOptions = Object.keys(tifs).map(key =>\n//   <option value={key}>{tifs[key]}</option>\n// )\n\n// {Object.keys(yourObject).map(function(key) {\n//   return <div>Key: {key}, Value: {yourObject[key]}</div>;\n// })}\n"]},"metadata":{},"sourceType":"module"}