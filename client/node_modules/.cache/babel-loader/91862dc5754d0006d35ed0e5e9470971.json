{"ast":null,"code":"var _jsxFileName = \"/home/carina/priv/trot-race-simulator/client/src/App.jsx\";\nimport React, { useRef } from \"react\";\nimport socketIOClient from \"socket.io-client\";\nimport _ from 'underscore';\nimport './style.scss';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      startResponse: false,\n      finishResponse: false,\n      endpoint: \"http://127.0.0.1:4001\"\n    };\n    this.horseRef = React.createRef();\n  }\n\n  componentWillMount() {\n    const {\n      endpoint\n    } = this.state;\n    const socket = socketIOClient(endpoint);\n    socket.on(\"StartHorses\", dataA => this.setState({\n      startResponse: dataA\n    }));\n    socket.on(\"FinishHorses\", dataB => this.setState({\n      finishResponse: dataB\n    }));\n  }\n\n  componentDidMount() {// console.log('startResponse', this.state.startResponse);\n    // console.log('finishResponse', this.state.finishResponse);\n  }\n\n  componentDidUpdate(prevState) {} // If we have a new update\n  // if (!this.featuresEqual(prevState.startResponse, this.state.startResponse)) {\n  // }\n  // featuresEqual(a, b) {\n  //   const comparable = (features) => features\n  //       .slice()\n  //       .sort()\n  //       .join(',');\n  //   return comparable(a) === comparable(b);\n  // }\n\n\n  renderTableData() {\n    const {\n      startResponse\n    } = this.state;\n    let rowRefs = [];\n\n    const setRef = ref => {\n      this.rowRefs.push(ref);\n    };\n\n    focusRow = id => this.rowRefs[id].focus();\n\n    if (startResponse && startResponse[0].event === 'start') {\n      return Object.keys(startResponse.sort(this.compare)).map(function (key) {\n        const id = startResponse[key].horse.name.replace(' ', '-');\n        return /*#__PURE__*/React.createElement(\"tr\", {\n          key: key,\n          id: id,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(\"td\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 15\n          }\n        }, startResponse[key].horse.id), /*#__PURE__*/React.createElement(\"td\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 15\n          }\n        }, startResponse[key].horse.name), /*#__PURE__*/React.createElement(\"td\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 15\n          }\n        }, startResponse[key].time > 0 ? startResponse[key].time : ''));\n      });\n    }\n\n    return;\n  }\n\n  updateTableData() {\n    const horses = this.state.startResponse;\n    const finishHorse = this.state.finishResponse;\n    const id = finishHorse.horse.name.replace(' ', '-');\n    const ref = this.refs.id;\n    console.log('REF', ref);\n    console.log('Finsih HORSE:', finishHorse);\n\n    if (finishHorse && finishHorse.horse.name) {\n      for (let i = 0; i < horses.lenght; i++) {\n        if (horses[i].name === finishHorse.horse.name) {\n          console.log('this horse', horses[i].name, ' : ', finishHorse.horse.name);\n        }\n      }\n\n      const result = horses.find(({\n        name\n      }) => name === finishHorse.horse.name);\n      console.log('result', result);\n    } // console.log('horses',horses);\n    // 4:\n    //   event: \"start\"\n    //   horse: {id: 1, name: \"Isabell Altenwerth\"}\n    // time: 13480\n    // console.log('finish horse', finishHorse);\n    // event: \"finish\"\n    // horse: {id: \"2\", name: \"Alfredo Mraz\"}\n    // time: 7710\n\n  } // Not used??\n  // renderData() {\n  //   const { horses } = this.state;\n  //   return Object.keys(horses).map(function(key) {\n  //     const id = horses[key].horse.name.replace(' ', '-');\n  //     return (\n  //       <tr key={key} ref={id}>\n  //           <td>{horses[key].horse.id}</td>\n  //           <td>{horses[key].horse.name}</td>\n  //           <td>{horses[key].time}</td>\n  //           {/* <td>{getTimeInSeconds(horses[key].time)}</td> */}\n  //       </tr>\n  //     )\n  //   });\n  // }\n\n\n  getTimeInSeconds(time) {}\n\n  compare(a, b) {\n    const timeA = a.time;\n    const timeB = b.time;\n    let comparison = 0;\n\n    if (timeA > timeB) {\n      comparison = 1;\n    } else if (timeA < timeB) {\n      comparison = -1;\n    }\n\n    return comparison;\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"table\", {\n      id: \"results\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"tbody\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 17\n      }\n    }, \"No\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 17\n      }\n    }, \"Horse\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 17\n      }\n    }, \"Time\")), this.state.startResponse && this.renderTableData(), this.state.finishResponse && this.updateTableData())));\n  }\n\n}\n\nexport default App; // const tifOptions = Object.keys(tifs).map(key =>\n//   <option value={key}>{tifs[key]}</option>\n// )\n// {Object.keys(yourObject).map(function(key) {\n//   return <div>Key: {key}, Value: {yourObject[key]}</div>;\n// })}","map":{"version":3,"sources":["/home/carina/priv/trot-race-simulator/client/src/App.jsx"],"names":["React","useRef","socketIOClient","_","App","Component","constructor","state","startResponse","finishResponse","endpoint","horseRef","createRef","componentWillMount","socket","on","dataA","setState","dataB","componentDidMount","componentDidUpdate","prevState","renderTableData","rowRefs","setRef","ref","push","focusRow","id","focus","event","Object","keys","sort","compare","map","key","horse","name","replace","time","updateTableData","horses","finishHorse","refs","console","log","i","lenght","result","find","getTimeInSeconds","a","b","timeA","timeB","comparison","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,MAAhB,QAA8B,OAA9B;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,CAAP,MAAc,YAAd;AACA,OAAO,cAAP;;AAEA,MAAMC,GAAN,SAAkBJ,KAAK,CAACK,SAAxB,CAAkC;AAChCC,EAAAA,WAAW,GAAG;AACZ;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,aAAa,EAAE,KADJ;AAEXC,MAAAA,cAAc,EAAE,KAFL;AAGXC,MAAAA,QAAQ,EAAE;AAHC,KAAb;AAKA,SAAKC,QAAL,GAAgBX,KAAK,CAACY,SAAN,EAAhB;AACD;;AAEDC,EAAAA,kBAAkB,GAAG;AACnB,UAAM;AAAEH,MAAAA;AAAF,QAAe,KAAKH,KAA1B;AACA,UAAMO,MAAM,GAAGZ,cAAc,CAACQ,QAAD,CAA7B;AACAI,IAAAA,MAAM,CAACC,EAAP,CAAU,aAAV,EAAyBC,KAAK,IAAI,KAAKC,QAAL,CAAc;AAAET,MAAAA,aAAa,EAAEQ;AAAjB,KAAd,CAAlC;AACAF,IAAAA,MAAM,CAACC,EAAP,CAAU,cAAV,EAA0BG,KAAK,IAAI,KAAKD,QAAL,CAAc;AAAER,MAAAA,cAAc,EAAES;AAAlB,KAAd,CAAnC;AAGD;;AACDC,EAAAA,iBAAiB,GAAG,CAKlB;AACA;AACD;;AAEDC,EAAAA,kBAAkB,CAACC,SAAD,EAAY,CAM7B,CANiB,CAChB;AACA;AAEA;AAIF;AACA;AACA;AACA;AACA;AAEA;AACA;;;AAEAC,EAAAA,eAAe,GAAG;AAChB,UAAM;AAAEd,MAAAA;AAAF,QAAoB,KAAKD,KAA/B;AAEA,QAAIgB,OAAO,GAAG,EAAd;;AAEA,UAAMC,MAAM,GAAIC,GAAD,IAAS;AACtB,WAAKF,OAAL,CAAaG,IAAb,CAAkBD,GAAlB;AACD,KAFD;;AAIAE,IAAAA,QAAQ,GAAIC,EAAD,IAAQ,KAAKL,OAAL,CAAaK,EAAb,EAAiBC,KAAjB,EAAnB;;AAGA,QAAIrB,aAAa,IAAIA,aAAa,CAAC,CAAD,CAAb,CAAiBsB,KAAjB,KAA2B,OAAhD,EAAyD;AACvD,aAAOC,MAAM,CAACC,IAAP,CAAYxB,aAAa,CAACyB,IAAd,CAAmB,KAAKC,OAAxB,CAAZ,EAA8CC,GAA9C,CAAkD,UAASC,GAAT,EAAc;AACrE,cAAMR,EAAE,GAAGpB,aAAa,CAAC4B,GAAD,CAAb,CAAmBC,KAAnB,CAAyBC,IAAzB,CAA8BC,OAA9B,CAAsC,GAAtC,EAA2C,GAA3C,CAAX;AACA,4BACE;AAAI,UAAA,GAAG,EAAEH,GAAT;AAAc,UAAA,EAAE,EAAER,EAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAKpB,aAAa,CAAC4B,GAAD,CAAb,CAAmBC,KAAnB,CAAyBT,EAA9B,CADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAKpB,aAAa,CAAC4B,GAAD,CAAb,CAAmBC,KAAnB,CAAyBC,IAA9B,CAFJ,eAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAK9B,aAAa,CAAC4B,GAAD,CAAb,CAAmBI,IAAnB,GAA0B,CAA1B,GAA8BhC,aAAa,CAAC4B,GAAD,CAAb,CAAmBI,IAAjD,GAAwD,EAA7D,CAHJ,CADF;AAOD,OATM,CAAP;AAUD;;AACD;AACD;;AACDC,EAAAA,eAAe,GAAG;AAChB,UAAMC,MAAM,GAAG,KAAKnC,KAAL,CAAWC,aAA1B;AACA,UAAMmC,WAAW,GAAG,KAAKpC,KAAL,CAAWE,cAA/B;AACA,UAAMmB,EAAE,GAAGe,WAAW,CAACN,KAAZ,CAAkBC,IAAlB,CAAuBC,OAAvB,CAA+B,GAA/B,EAAoC,GAApC,CAAX;AAEA,UAAMd,GAAG,GAAG,KAAKmB,IAAL,CAAUhB,EAAtB;AACAiB,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBrB,GAAnB;AAGAoB,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BH,WAA7B;;AAEA,QAAIA,WAAW,IAAIA,WAAW,CAACN,KAAZ,CAAkBC,IAArC,EAA2C;AAEzC,WAAI,IAAIS,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGL,MAAM,CAACM,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,YAAIL,MAAM,CAACK,CAAD,CAAN,CAAUT,IAAV,KAAmBK,WAAW,CAACN,KAAZ,CAAkBC,IAAzC,EAA+C;AAC7CO,UAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BJ,MAAM,CAACK,CAAD,CAAN,CAAUT,IAApC,EAA0C,KAA1C,EAAkDK,WAAW,CAACN,KAAZ,CAAkBC,IAApE;AACD;AACF;;AAGD,YAAMW,MAAM,GAAGP,MAAM,CAACQ,IAAP,CAAa,CAAC;AAAEZ,QAAAA;AAAF,OAAD,KAAcA,IAAI,KAAKK,WAAW,CAACN,KAAZ,CAAkBC,IAAtD,CAAf;AAEAO,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBG,MAAtB;AACD,KAvBe,CAyBhB;AACA;AACA;AACA;AACE;AACF;AACA;AACA;AACA;;AACD,GAzG+B,CA2GhC;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAE,EAAAA,gBAAgB,CAACX,IAAD,EAAO,CAEtB;;AACDN,EAAAA,OAAO,CAACkB,CAAD,EAAIC,CAAJ,EAAO;AACZ,UAAMC,KAAK,GAAGF,CAAC,CAACZ,IAAhB;AACA,UAAMe,KAAK,GAAGF,CAAC,CAACb,IAAhB;AAEA,QAAIgB,UAAU,GAAG,CAAjB;;AACA,QAAIF,KAAK,GAAGC,KAAZ,EAAmB;AACjBC,MAAAA,UAAU,GAAG,CAAb;AACD,KAFD,MAEO,IAAIF,KAAK,GAAGC,KAAZ,EAAmB;AACxBC,MAAAA,UAAU,GAAG,CAAC,CAAd;AACD;;AACD,WAAOA,UAAP;AACD;;AACDC,EAAAA,MAAM,GAAG;AACP,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAO,MAAA,EAAE,EAAC,SAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAFF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF,CADF,EAMG,KAAKlD,KAAL,CAAWC,aAAX,IACC,KAAKc,eAAL,EAPJ,EASG,KAAKf,KAAL,CAAWE,cAAX,IACC,KAAKgC,eAAL,EAVJ,CADF,CADF,CADJ;AAmBD;;AA/J+B;;AAiKlC,eAAerC,GAAf,C,CAGA;AACA;AACA;AAEA;AACA;AACA","sourcesContent":["import React, { useRef } from \"react\";\nimport socketIOClient from \"socket.io-client\";\nimport _ from 'underscore';\nimport './style.scss';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      startResponse: false,\n      finishResponse: false,\n      endpoint: \"http://127.0.0.1:4001\",\n    };\n    this.horseRef = React.createRef();\n  }\n\n  componentWillMount() {\n    const { endpoint } = this.state;\n    const socket = socketIOClient(endpoint);\n    socket.on(\"StartHorses\", dataA => this.setState({ startResponse: dataA }));\n    socket.on(\"FinishHorses\", dataB => this.setState({ finishResponse: dataB }));\n\n\n  }\n  componentDidMount() {\n\n\n\n\n    // console.log('startResponse', this.state.startResponse);\n    // console.log('finishResponse', this.state.finishResponse);\n  }\n\n  componentDidUpdate(prevState) {\n    // If we have a new update\n    // if (!this.featuresEqual(prevState.startResponse, this.state.startResponse)) {\n\n    // }\n\n  }\n\n  // featuresEqual(a, b) {\n  //   const comparable = (features) => features\n  //       .slice()\n  //       .sort()\n  //       .join(',');\n\n  //   return comparable(a) === comparable(b);\n  // }\n\n  renderTableData() {\n    const { startResponse } = this.state;\n\n    let rowRefs = [];\n\n    const setRef = (ref) => {\n      this.rowRefs.push(ref);\n    };\n\n    focusRow = (id) => this.rowRefs[id].focus();\n\n\n    if (startResponse && startResponse[0].event === 'start') {\n      return Object.keys(startResponse.sort(this.compare)).map(function(key) {\n        const id = startResponse[key].horse.name.replace(' ', '-');\n        return (\n          <tr key={key} id={id}>\n              <td>{startResponse[key].horse.id}</td>\n              <td>{startResponse[key].horse.name}</td>\n              <td>{startResponse[key].time > 0 ? startResponse[key].time : ''}</td>\n          </tr>\n        )\n      });\n    }\n    return;\n  }\n  updateTableData() {\n    const horses = this.state.startResponse;\n    const finishHorse = this.state.finishResponse;\n    const id = finishHorse.horse.name.replace(' ', '-');\n\n    const ref = this.refs.id;\n    console.log('REF', ref);\n\n\n    console.log('Finsih HORSE:', finishHorse);\n\n    if (finishHorse && finishHorse.horse.name) {\n\n      for(let i = 0; i < horses.lenght; i++ ){\n        if (horses[i].name === finishHorse.horse.name) {\n          console.log('this horse', horses[i].name, ' : ',  finishHorse.horse.name )\n        }\n      }\n\n\n      const result = horses.find( ({ name }) => name === finishHorse.horse.name);\n\n      console.log('result', result);\n    }\n\n    // console.log('horses',horses);\n    // 4:\n    //   event: \"start\"\n    //   horse: {id: 1, name: \"Isabell Altenwerth\"}\n      // time: 13480\n    // console.log('finish horse', finishHorse);\n    // event: \"finish\"\n    // horse: {id: \"2\", name: \"Alfredo Mraz\"}\n    // time: 7710\n  }\n\n  // Not used??\n  // renderData() {\n  //   const { horses } = this.state;\n\n  //   return Object.keys(horses).map(function(key) {\n  //     const id = horses[key].horse.name.replace(' ', '-');\n  //     return (\n  //       <tr key={key} ref={id}>\n  //           <td>{horses[key].horse.id}</td>\n  //           <td>{horses[key].horse.name}</td>\n  //           <td>{horses[key].time}</td>\n  //           {/* <td>{getTimeInSeconds(horses[key].time)}</td> */}\n  //       </tr>\n  //     )\n  //   });\n  // }\n\n  getTimeInSeconds(time) {\n\n  }\n  compare(a, b) {\n    const timeA = a.time;\n    const timeB = b.time;\n\n    let comparison = 0;\n    if (timeA > timeB) {\n      comparison = 1;\n    } else if (timeA < timeB) {\n      comparison = -1;\n    }\n    return comparison;\n  }\n  render() {\n    return (\n        <div>\n          <table id='results'>\n            <tbody>\n              <tr>\n                <th>No</th>\n                <th>Horse</th>\n                <th>Time</th>\n              </tr>\n              {this.state.startResponse &&\n                this.renderTableData()\n              }\n              {this.state.finishResponse &&\n                this.updateTableData()\n              }\n            </tbody>\n          </table>\n        </div>\n    );\n  }\n}\nexport default App;\n\n\n// const tifOptions = Object.keys(tifs).map(key =>\n//   <option value={key}>{tifs[key]}</option>\n// )\n\n// {Object.keys(yourObject).map(function(key) {\n//   return <div>Key: {key}, Value: {yourObject[key]}</div>;\n// })}\n"]},"metadata":{},"sourceType":"module"}